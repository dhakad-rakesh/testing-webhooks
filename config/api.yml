swagger: '2.0'
info:
  title: Gammabet API
  description: >-
    This API allows complete interaction with Gammabet, built with
    mobile clients in mind.
  contact:
    email: aksingh@grepruby.com
  version: '1.0'
host: 'localhost:3000'
basePath: "/api/v1/"
tags:
- name: 'user'
  description: 'Everything about your User'
- name: "sport"
  description: "Everything about your Sports"
- name: "match"
  description: "Everything about your Matches"
- name: "team"
  description: "Everything about your Teams"
- name: 'tournament'
  description: 'Everything about your Tournaments'
- name: 'season'
  description: 'Everything about your Season'
- name: 'favourite'
  description: 'Everything about favourite'
- name: 'markets'
  description: 'Everything about markets'
- name: 'score'
  description: 'Live match scores'
- name: 'bet'
  description: 'Bet on live matches'
- name: 'country'
  description: 'country'
- name: 'language'
  description: 'language'
- name: 'dialect'
  description: 'dialect'
- name: 'fund_transfer'
  description: 'fund_transfer'
- name: 'transaction_history'
  description: 'transaction_history'
schemes:
- "http"
paths:
  /users/sign_out:
    delete:
      tags:
      - 'user'
      summary: 'Logout user'
      description: 'Expire user session'
      operationId: 'user_sign_out'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []
  /users/preferences:
    patch:
      tags:
      - "user"
      summary: 'Edit user profile'
      description: 'Edit user profile, first_name and last_name'
      operationId: 'edit_user_profile'
      produces:
      - 'application/json'
      parameters:     
      - name: 'user'
        in: 'body'
        description: 'Edit user profile'
        required: false
        schema:
          type: 'object'
          properties:
            username:
              type: 'string'
            first_name:
              type: 'string'
            last_name:
              type: 'string'
            date_of_birth:
              type: 'string'
            phone:
              type: 'string'
            country:
              type: 'string'
            state:
              type: 'string'
            city:
              type: 'string'
            zip_code:
              type: 'string'
            street_address:
              type: 'string'  
            password:
              type: 'string'
            password_confirmation:
              type: 'string'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []
    get:
      tags:
      - 'user'
      summary: 'User profile'
      description: 'Gives details of user'
      operationId: 'user_profile'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []

  /users/limits:
    patch:
      tags:
      - "user"
      summary: 'Edit user limits'
      description: 'Edit user limits, bet limit, deposite limit etc'
      operationId: 'edit_user_limits'
      produces:
      - 'application/json'
      parameters:
      - name: 'user'
        in: 'body'
        description: 'Edit user limits'
        required: true
        schema:
          type: 'object'
          properties:
            timeout_limit:
              type: 'object'
              properties:
                range:
                  type: "string"
            reality_check_limit:
              type: 'object'
              properties:
                range:
                  type: "string"
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []
    get:
      tags:
      - 'user'
      summary: 'Show user limits'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []
  /settings:
    get:
      tags:
      - "settings"
      description: 'Fetch all the application dynamic settings.'
      summary: 'Get application constants'
      operationId: 'application_settings'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Authorization information is missing or invalid.'
  
  /preferences:
    get:
      tags:
      - 'user'
      summary: 'profile filter'
      description: 'profile filter'
      operationId: 'profile-filter'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Error'
      security:
        - JWT: []

  /users/preferences/upload_kyc:
    post:
      tags:
      - "user"
      summary: 'Upload KYC'
      description: 'Upload user kyc images'
      operationId: 'upload_kyc_users_preferences'
      produces:
      - 'application/json'
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: selfie_picture
        type: file
        description: 'Upload user selfie image'
      - in: formData
        name: govt_id_picture
        type: file
        description: 'Upload user selfie with govt. id image'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/ProfileImage'
        400:
          description: 'Error'
      security:
        - JWT: []
  /users/preferences/upload_profile_pic:
    post:
      tags:
      - "user"
      summary: 'Upload profile pic'
      description: 'Upload user profile picture'
      operationId: 'upload_profile_pic_users_preferences'
      produces:
      - 'application/json'
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: image
        type: file
        description: 'Upload user profile pic'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/ProfileImage'
        400:
          description: 'Error'
      security:
        - JWT: []
  /users:
    post:
      tags:
      - "user"
      summary: 'Register user'
      description: 'Take user detail and register'
      operationId: 'user_sign_up'
      produces:
      - 'application/json'
      parameters:
      - name: 'user'
        in: 'body'
        description: 'User details for registration'
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
            username:
              type: 'string'
            currency:
              type: 'string'
            country:
              type: 'string'
      responses:
        200:
          description: 'Conformation email is sent to your email'
        400:
          description: 'Error'
  /users/confirmations:
    get:
      tags:
      - 'user'
      summary: 'Return authentication token'
      description: 'Return Bearer token'
      operationId: ""
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Email confirmation token"
          required: true
          schema:
            type: 'object'
            properties:
              confirmation_token:
                type: 'string'
                title: 'confirmation_token'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Token'
        400:
          description: 'Confirmation token is invalid'
  /users/onboarding_steps:
    put:
      tags:
      - 'user'
      summary: 'Return updated user state'
      description: 'Return previous & updated user state'
      operationId: ""
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: 'user_action'
          in: 'body'
          description: 'Onboarding action to be performed'
          required: true
          type: string
          enum: [complete_profile, update_contact_details, complete_phone_verification]
        - name: 'user'
          in: 'body'
          description: 'User details for onboarding'
          required: true
          schema:
            type: 'object'
            properties:
              first_name:
                type: 'string'
              last_name:
                type: 'string'
              password:
                type: 'string'
              date_of_birth:
                type: 'string'
              phone:
                type: 'string'
              street_address:
                type: 'string'
              state:
                type: 'string'
              city:
                type: 'string'
              zip_code:
                type: 'string'
              otp:
                type: 'string'
              token:
                type: 'string'
              user_action:
                type: 'string'
        - name: 'otp'
          in: 'body'
          description: 'OTP'
          type: string
        - name: 'token received on phone'
          in: 'body'
          description: 'Firebase session info token'
          type: string
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/UserStateTransition'
        400:
          description: 'Error'
  /users/sign_in:
    post:
      tags:
      - 'user'
      summary: 'Return authentication token'
      description: 'Return Bearer token'
      operationId: "users_sign"
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Login via username or email"
          required: true
          schema:
            type: 'object'
            properties:
              login:
                type: 'string'
                title: 'username / email'
              password:
                type: 'string'
                title: 'password'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Token'
        401:
          description: 'Authorization information is missing or invalid.'
  /users/security_questions:
    get:
      tags:
      - 'user'
      summary: 'Return security question of a user for resetting password'
      description: 'Return security question of a user for resetting password'
      operationId: 'users_security_questions'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'email'
        in: 'query'
        description: 'Email of user whose security questions we want.'
        required: true
        type: 'string'
        allowEmptyValue: false
      responses:
        200:
          description: 'User security questions.'
        404:
          description: 'User not found'
  /users/security_questions/{security_question_id}/verify:
    post:
      tags:
      - 'user'
      summary: 'Return result for answered question'
      description: 'Return result for answered question'
      operationId: 'users_verify_security_answer'
      produces:
      - "application/json"
      parameters:
      - name: "security_question_id"
        in: "path"
        description: "ID of security question to return"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        description: "Verify Security Answer"
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
              title: 'email'
            answer:
              type: 'string'
              title: 'answer'
      responses:
        200:
          description: 'ture or false'
        404:
          description: 'User not found'
  /users/passwords:
    post:
      tags:
      - 'user'
      summary: 'Set new password'
      description: 'Set new password'
      operationId: 'user_new_password'
      produces:
        - 'application/json'
      parameters:
      - name: "body"
        in: "body"
        description: "Set new password"
        required: true
        schema:
          type: 'object'
          properties:
            email:
              type: 'string'
      responses:
        200:
          description: 'New password is sent to your email'
        400:
          description: 'Error'
        404:
          description: 'User not found'
    patch:
      tags:
      - "user"
      summary: 'Update user password'
      description: 'Update password for logged in user'
      operationId: 'update_user_password'
      produces:
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "Update password"
          required: true
          schema:
            type: 'object'
            properties:
              current_password:
                type: 'string'
                title: 'current_password'
              password:
                type: 'string'
                title: 'password'
              password_confirmation:
                type: 'string'
                title: 'password_confirmation'
      responses:
        200:
          description: 'Successful operation'
        400:
          description: 'Error'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /users/passwords/new:
      get:
        tags:
        - 'user'
        summary: 'Reset old password with new password'
        description: 'Reset password'
        operationId: 'user_reset_password'
        produces:
        - "application/xml"
        - "application/json"
        parameters:
          - name: "email"
            in: "query"
            description: "Reset password"
            required: true
            schema:
              type: 'object'
              properties:
                email:
                  type: 'string'
                  title: 'email'
        responses:
          200:
            description: 'Success!'
          400:
            description: 'Error'
        security:
          - JWT: []
  /users/search:
    post:
      tags:
      - "user"
      summary: 'Search for user'
      description: 'Search for user'
      operationId: 'search_user'
      produces:
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "Search Users"
          required: true
          schema:
            type: 'object'
            properties:
              search:
                type: 'string'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /wallets:
    get:
      tags:
      - "user"
      summary: 'Get user wallets'
      description: 'Fetch point and competition wallets for a user'
      operationId: 'user_wallets'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /ledgers:
    get:
      tags:
      - "user"
      summary: 'Get user ledgers'
      description: 'Fetch transactions for a user'
      operationId: 'user_ledgers'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      produces:
      - 'application/json'
      responses:
        200:
          description: 'Successful operation'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

  /fund_transfers/get_user_details:
    get:
      tags:
      - 'fund_transfer'
      summary: 'Find user by username'
      description: 'Return a single user'
      operationId: ""
      produces:
      - 'application/json'
      parameters:
      - name: "username"
        in: "query"
        description: "Username of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: 'successful operation'
        400:
          description: "Invalid user id supplied"
        401:
          description: 'Authorization information is missing.'
        404:
          description: "User not found"
      security:
        - JWT: []

  /fund_transfers:
    post:
      tags:
      - 'fund_transfer'
      summary: 'Initiates transfer process'
      description: 'Initiates transfer process'
      operationId: ""
      produces:
      - 'application/json'
      parameters:
      - name: "id"
        in: "query"
        description: "Id of user to transfer funds"
        required: true
        type: "integer"
      - name: 'amount'
        in: 'query'
        description: 'Amount to be transferred'
        required: true
        type: 'number'
        format: 'float'
      responses:
        200:
          description: 'successful operation'
        401:
          description: 'Authorization information is missing.'
        404:
          description: "User not found"
      security:
        - JWT: []
        
  /transaction_history:
    get:
      tags:
      - 'transaction_history'
      summary: "Returns transaction history of user's wallet"
      description: "Returns transaction history of user's wallet"
      operationId: ""
      produces:
      - 'application/json'
      parameters:
      - name: "category"
        in: "query"
        description: "Transaction category from ('Bet', 'Transfer', 'ComboBet', 'User')"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Transaction type (credit, debit)"
        required: false
        type: "string"
        enum: ['credit', 'debit']
      - name: 'min_date'
        in: 'query'
        description: 'Start date of filter'
        required: false
        type: 'string'
        format: 'date'
      - name: 'max_date'
        in: 'query'
        description: 'End date of filter'
        required: false
        type: 'string'
        format: 'date'
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
        400:
          description: "Invalid user id supplied"
        401:
          description: 'Authorization information is missing.'
        404:
          description: "User not found"
      security:
        - JWT: []

  /security_questions:
    get:
      tags:
      - "user"
      summary: 'Return security questions'
      description: 'Return security questions'
      operationId: 'user_security_questions'
      produces:
      - 'application/json'
      responses:
        200:
          description: 'Return questions'
  /auth/facebook_access_token/callback:
    post:
      tags:
      - 'user'
      summary: 'Sign in via facebook'
      description: 'Take access_token and log in user'
      operationId: 'user_facebook_login'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "access_token"
          in: "query"   # TODO: Try to include this in body
          description: "Access token from facebook"
          required: true
          schema:
            type: 'object'
            properties:
              access_token:
                type: 'string'
                title: 'access_token'
      responses:
        200:
          description: 'Successfully logged in via facebook'
          schema:
            $ref: '#/definitions/Token'
        400:
          description: 'Could not log in via facebook. Invalid access token or user information'
  /auth/twitter_access_token/callback:
    post:
      tags:
      - 'user'
      summary: 'Sign in via facebook'
      description: 'Take access_token and log in user'
      operationId: 'user_facebook_login'
      produces:
      - 'application/json'
      parameters:
        - name: "token"
          in: "query"   # TODO: Try to include this in body
          description: "Access token from facebook"
          required: true
          schema:
            type: 'object'
            properties:
              access_token:
                type: 'string'
                title: 'token'
        - name: "token_secret"
          in: "query"   # TODO: Try to include this in body
          description: "Access token from facebook"
          required: true
          schema:
            type: 'object'
            properties:
              access_token:
                type: 'string'
                title: 'token_secret'
      responses:
        200:
          description: 'Successfully logged in via facebook'
          schema:
            $ref: '#/definitions/Token'
        400:
          description: 'Could not log in via facebook. Invalid access token or user information'
  /auth/google_oauth2_access_token/callback:
    post:
      tags:
      - 'user'
      summary: 'Sign in via google'
      description: 'Take access_token and log in user'
      operationId: 'user_google_login'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "access_token"
          in: "query"    # TODO: Try to include this in body
          description: "Access token from facebook"
          required: true
          schema:
            type: 'object'
            properties:
              access_token:
                type: 'string'
                title: 'access_token'
      responses:
        200:
          description: 'Successfully logged in via google'
          schema:
            $ref: '#/definitions/Token'
        400:
          description: 'Could not log in via google. Invalid access token or user information'

  /sports:
    get:
      tags:
      - "sport"
      summary: "Return all sports"
      description: "Return all sports supported by Gammabet"
      operationId: "sportscontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Sports"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

  /sports/{id}:
    get:
      tags:
      - 'sport'
      summary: 'Find sport by id'
      description: 'Return a single sport'
      operationId: "sport_with_id"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of sport to return"
        required: true
        type: "integer"
        format: "int64"
      - name: 'scope'
        in: 'query'
        description: 'Scope of matches [live]'
        required: false
        type: 'string'
        enum: ['live']
        allowEmptyValue: true
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Sport'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /sports/{id}/matches:
    get:
      tags:
      - 'sport'
      summary: 'Return matches of perticular sport'
      description: 'Return matches of a single sport'
      operationId: "matches_of_sport"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of matches [live, upcoming]'
        required: false
        type: 'string'
        enum: ['live', 'upcoming']
        default: 'all'
        allowEmptyValue: false
      - name: "id"
        in: "path"
        description: "ID of sport"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'country'
        in: 'query'
        description: 'country'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Sport_matches'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /sports/{id}/tournaments:
    get:
      tags:
      - 'sport'
      summary: 'Return tournaments of perticular sport'
      description: 'Return tournament of a single sport'
      operationId: "tournamnet_of_sport"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of sport"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'country'
        in: 'query'
        description: 'country'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Sport_Tournaments'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "sport not found"
      security:
        - JWT: []
  /sports/{id}/live_scores:
    get:
      tags:
      - 'sport'
      summary: 'Return score of live macthes of give sport'
      description: 'Return score of live macthes of give sport'
      operationId: "live_score_match_of_sport"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of sport"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches:
    get:
      tags:
      - "match"
      summary: "Return all matches"
      description: "Return all matches"
      operationId: "matchescontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: 'scope'
          in: 'query'
          description: 'Scope of matches [live, upcoming, last_minutes, highlight]'
          required: false
          type: 'string'
          enum: ['live', 'upcoming', 'last_minutes', 'highlight']
          default: 'all'
          allowEmptyValue: false
        - name: 'page'
          in: 'query'
          description: 'The paginated list page.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'per_page'
          in: 'query'
          description: 'The paginated list limit.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'country'
          in: 'query'
          description: 'country'
          required: false
          type: 'string'
          allowEmptyValue: false
        - name: 'continent'
          in: 'query'
          description: 'continent'
          required: false
          type: 'string'
          allowEmptyValue: false
        - name: 'tournament_id'
          in: 'query'
          description: 'tournament'
          required: false
          type: 'string'
          allowEmptyValue: false
        - name: 'sport_id'
          in: 'query'
          description: 'sport'
          required: false
          type: 'string'
          allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Matches"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /groups:
    get:
      tags:
      - "groups"
      summary: "Return all Groups"
      description: "Return all Groups"
      operationId: "groupscontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: 'page'
          in: 'query'
          description: 'The paginated list page.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'per_page'
          in: 'query'
          description: 'The paginated list limit.'
          required: false
          type: 'integer'
          allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Groups"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /matches/available_matches:
    get:
      tags:
      - "match"
      summary: "Return all avaiable active matches"
      description: "Return all avaiable active matches"
      operationId: "matchescontrolleravailablematches"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: 'page'
          in: 'query'
          description: 'The paginated list page.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'per_page'
          in: 'query'
          description: 'The paginated list limit.'
          required: false
          type: 'integer'
          allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Matches"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /matches/live_matches:
    get:
      tags:
      - "match"
      summary: "Return all live active matches"
      description: "Return all live active matches with all markets data"
      operationId: "matchescontrollerlivematches"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: 'page'
          in: 'query'
          description: 'The paginated list page.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'per_page'
          in: 'query'
          description: 'The paginated list limit.'
          required: false
          type: 'integer'
          allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Matches"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /matches/{match_id}/odds_summary:
    get:
      tags:
      - "match"
      summary: "Return odds summary for a market belonging to a particular match"
      description: "Return odds summary"
      operationId: "MatchesControllerOddsSummary"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: 'match_id'
          in: 'path'
          description: 'ID of match'
          required: true
          type: 'integer'
          allowEmptyValue: false
        - name: 'market_id'
          in: 'query'
          description: 'market id'
          required: true
          type: 'integer'
          allowEmptyValue: false
        - name: 'identifier'
          in: 'query'
          description: 'identifier for market'
          required: true
          type: 'integer'
          allowEmptyValue: false
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/OddsSummary"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /tournaments/{tournament_id}/matches/my_bets:
    get:
      tags:
      - 'match'
      summary: 'Return all matches where user bet for specific tournament'
      description: "Return all match where user have created bets for a specific tournament"
      operationId: "my_bets_matches"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'tournament_id'
        in: 'path'
        required: true
        type: 'integer'
        allowEmptyValue: false
      - name: 'scope'
        in: 'query'
        description: 'Scope of bets [pending, won, lost, hold, resolved]'
        required: false
        type: 'string'
        enum: ['pending', 'won', 'lost', 'hold', 'resolved']
        default: 'pending'
        allowEmptyValue: false
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /markets:
    get:
      tags:
      - 'markets'
      summary: 'Returns all markets'
      description: 'Returns all markets'
      operationId: "MarketsControllerIndex"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Match'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches/{match_id}/markets/odds_data:
    get:
      tags:
      - 'match'
      summary: 'Find match by id'
      description: 'Return a single match'
      operationId: "market_of_match_id"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "match_id"
        in: "path"
        description: "ID of match to return"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Match'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches/{id}/markets/filters:
    get:
      tags:
      - 'match'
      summary: 'Find filters for match by id'
      description: 'Return market ids, keys, periods for match.'
      operationId: "filter_keys_of_match_id"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "match_id"
        in: "path"
        description: "ID of match to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Match'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches/{id}/live_score:
    get:
      tags:
      - 'match'
      summary: 'Find live score of match by id'
      description: 'Find live score of match by id'
      operationId: "match_with_id_live_score"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of match to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'successful operation'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches/{match_id}/teams:
    get:
      tags:
      - "match"
      summary: "Return all teams for a particular match"
      description: "Return all teams for a particular match"
      operationId: "teamscontroller"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "match_id"
        in: "path"
        description: "ID of match"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#definitions/Teams'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /matches/{id}:
    get:
      tags:
      - 'match'
      summary: 'Find match by id'
      description: 'Return a single match'
      operationId: "match_with_id"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of match to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Match'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /tournaments:
    get:
      tags:
      - 'tournament'
      summary: 'Return all tournaments'
      description: 'Return all tournaments with different tournament types as keys'
      operationId: "tournament_index"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'country_id'
        in: 'query'
        description: 'country id retieved by countries API'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'sport_id'
        in: 'query'
        description: 'Sport ID'
        required: false
        type: 'integer'
        allowEmptyValue: false

      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Tournaments'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /tournaments/my_bets:
    get:
      tags:
      - 'tournament'
      summary: 'Return all tournaments where user has placed bets'
      description: "Return all tournaments where user has placed bets."
      operationId: "my_bets_tournaments"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of bets [pending, won, lost]'
        required: false
        type: 'string'
        enum: ['pending', 'won', 'lost']
        default: 'pending'
        allowEmptyValue: false
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /tournaments/{id}:
    get:
      tags:
      - 'tournament'
      summary: 'Return tournament by id'
      description: 'Return single tournament'
      operationId: "tournament_show"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'id'
        in: 'path'
        description: 'ID of tournament to return'
        required: true
        type: 'integer'
        format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Tournament'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Tournament not found"
      security:
        - JWT: []
  /tournaments/{id}/matches:
    get:
      tags:
      - 'tournament'
      summary: 'Return matches of perticular tournament'
      description: 'Return matches of a single tournament'
      operationId: "tournament_matches"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of matches [live, upcoming]'
        required: false
        type: 'string'
        enum: ['live', 'upcoming']
        default: 'all'
        allowEmptyValue: false
      - name: "id"
        in: "path"
        description: "ID of tournament"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'country'
        in: 'query'
        description: 'country'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: "market_id"
        in: "query"
        description: "ID of market to be shown."
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Tournament_matches'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /tournaments/{id}/teams:
    get:
      tags:
      - 'tournament'
      summary: 'Return teams of perticular tournament'
      description: 'Return teams of a single tournament'
      operationId: "tournament_teams"
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "ID of tournament"
        required: true
        type: "integer"
        format: "int64"
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Teams'
        400:
          description: "Invalid ID supplied"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Match not found"
      security:
        - JWT: []
  /seasons:
    get:
      tags:
      - 'season'
      summary: 'Return all Seasons'
      description: 'Return all Seasons'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#definitions/Season'
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

  /matches/favourite_matches:
    get:
      tags:
      - 'favourite'
      summary: 'Returns matches marked as favourites'
      description: 'Returns matches marked as favourites'
      produces:
      - 'application/xml'
      - 'application/json'
      responses:
        200:
          description: 'Successful Operation'
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []

  /matches/{match_id}/add_favourite:
    post:
      tags:
      - 'favourite'
      summary: 'Create favourite match'
      description: 'Create favourite match'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "match_id"
        in: "path"
        description: "ID of match"
        required: true
        type: "integer"
        format: "int64"
      - name: "is_default"
        in: "query"
        description: "Default Favourite"
        required: true
        type: "boolean"
        default: false
      responses:
        200:
          description: 'Marked favourite'
        400:
          description: "User Already marked this as favourite"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []

  /matches/{match_id}/remove_favourite:
    delete:
      tags:
      - 'favourite'
      summary: 'Delete favourite match'
      description: 'Delete favourite match'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "match_id"
        in: "path"
        description: "ID of match"
        required: true
        type: "integer"
        format: "int64"
      - name: "is_default"
        in: "query"
        description: "Default Favourite"
        required: true
        type: "boolean"
        default: false
      responses:
        200:
          description: 'Marked favourite'
        400:
          description: "User Already marked this as favourite"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []

  /sports/{sport_id}/favourites:
    post:
      tags:
      - 'favourite'
      summary: 'Create favourite sport'
      description: 'Create favourite sport'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "sport_id"
        in: "path"
        description: "ID of sport"
        required: true
        type: "integer"
        format: "int64"
      - name: "is_default"
        in: "query"
        description: "Default Favourite"
        required: true
        type: "boolean"
        default: false
      responses:
        200:
          description: 'Marked favourite'
        400:
          description: "User Already marked this as favourite"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []
  /teams/{team_id}/favourites:
    post:
      tags:
      - 'favourite'
      summary: 'Create favourite team'
      description: 'Create favourite team'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "team_id"
        in: "path"
        description: "ID of team"
        required: true
        type: "integer"
        format: "int64"
      - name: "is_default"
        in: "query"
        description: "Default Favourite"
        required: true
        type: "boolean"
        default: false
      responses:
        200:
          description: 'Marked favourite'
        400:
          description: "User Already marked this as favourite"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []
  /tournaments/{tournament_id}/favourites:
    post:
      tags:
      - 'favourite'
      summary: 'Create favourite tournament'
      description: 'Create favourite trournament'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "ID of tournament"
        required: true
        type: "integer"
        format: "int64"
      - name: "is_default"
        in: "query"
        description: "Default Favourite"
        required: true
        type: "boolean"
        default: false
      responses:
        200:
          description: 'Marked favourite'
        400:
          description: "User Already marked this as favourite"
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Resource not found"
      security:
        - JWT: []
  /sports/{sport_id}/favourites/{id}:
    delete:
      tags:
      - 'favourite'
      summary: 'Delete favourite sport'
      description: 'Delete favourite sport'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "sport_id"
        in: "path"
        description: "ID of sport"
        required: true
        type: "integer"
        format: "int64"
      - name: "id"
        in: "path"
        description: "ID of favourite"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'Succesfully destroy favourite'
        400:
          description: 'Error'
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Favourite not found"
      security:
        - JWT: []
  /teams/{team_id}/favourites/{id}:
    delete:
      tags:
      - 'favourite'
      summary: 'Delete favourite team'
      description: 'Delete favourite team'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "team_id"
        in: "path"
        description: "ID of team"
        required: true
        type: "integer"
        format: "int64"
      - name: "id"
        in: "path"
        description: "ID of favourite"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'Succesfully destroy favourite'
        400:
          description: 'Error'
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Favourite not found"
      security:
        - JWT: []
  /tournaments/{tournament_id}/favourites/{id}:
    delete:
      tags:
      - 'favourite'
      summary: 'Delete favourite tournament'
      description: 'Delete favourite tournament'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: "tournament_id"
        in: "path"
        description: "ID of tournamnet"
        required: true
        type: "integer"
        format: "int64"
      - name: "id"
        in: "path"
        description: "ID of favourite"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'Succesfully destroy favourite'
        400:
          description: 'Error'
        401:
          description: 'Authorization information is missing or invalid.'
        404:
          description: "Favourite not found"
      security:
        - JWT: []
  /scores:
    get:
      tags:
      - "score"
      summary: "Return all live match score"
      description: "Return all live match scor"
      operationId: "scorescontroller"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /bets:
    post:
      tags:
      - 'bet'
      summary: 'Create bet slip'
      description: 'Create bet slip on live matches'
      operationId: 'betcontroller'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Create bet slip on live matches"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bet_slips'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    market_uid:
                      type: 'integer'
                      title: 'market_uid'
                    outcome_id:
                      type: 'string'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    stake:
                      type: 'integer'
                      title: 'stake'
                    identifier:
                      type: 'string'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
      responses:
        200:
          description: 'Bet Created.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
    get:
      tags:
      - "bet"
      summary: "Return all bets for current user"
      description: "Return all bets for current user"
      operationId: "current_user_bets"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of bets [pending, won, lost, hold, resolved]'
        required: true
        type: 'string'
        enum: ['--','pending', 'won', 'lost', 'hold', 'resolved']
      - name: 'combo'
        in: 'query'
        description: 'Set true if combo bet is required'
        required: true
        type: 'boolean'
        enum: ['true', 'false']
      - name: 'bet_type'
        in: 'query'
        description: 'Select all to get all bets'
        required: false
        type: 'string'
        enum: ['all']
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
      - name: 'country'
        in: 'query'
        description: 'country'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'tournament_id'
        in: 'query'
        description: 'tournament_id'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'betting_pool_id'
        in: 'query'
        description: 'betting_pool_id'
        required: false
        type: 'integer'
        allowEmptyValue: true
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /hold:
    post:
      tags:
      - 'bet'
      summary: 'Create bet slip to hold a bet'
      description: 'Create bet slip to hold a bet'
      operationId: 'BetController'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "Create bet slip on live matches"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    outcome_id:
                      type: 'integer'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    stake:
                      type: 'integer'
                      title: 'stake'
                      required: false
                    identifier:
                      type: 'integer'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
                    accumulator_bet_id:
                      type: 'integer'
                      title: 'accumulator_bet_id'
                      required: false
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /hold/current_odds:
    get:
      tags:
      - 'bet'
      summary: 'Provide the current odds'
      description: 'Provide the current odds'
      operationId: 'HoldControllerCurrentOdds'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'id'
        in: 'query'
        description: 'Bet id'
        required: true
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /hold/batch_delete:
    post:
      tags:
      - 'bet'
      summary: 'delete a hold bet'
      description: 'delete a hold bet'
      operationId: 'HoldBetsDelete'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "List of bets to delete"
          required: true
          schema:
            type: 'object'
            properties:
              bets:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
      responses:
        200:
          description: "Bets are deleted."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /hold/confirm:
    post:
      tags:
      - 'bet'
      summary: 'Confirm a hold bet'
      description: 'Confirm a hold bet'
      operationId: 'HoldController'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "List of bets to confirm"
          required: true
          schema:
            type: 'object'
            properties:
              bets:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
      responses:
        200:
          description: "Bet is confirmed."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /cashout/status:
    post:
      tags:
      - 'bet'
      summary: 'Get cashout status'
      description: 'Get cashout status for a bet'
      operationId: 'CashoutControllerStatus'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "List of bet ids for which cashout status should be returned"
          required: true
          schema:
            type: 'object'
            properties:
              bets:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
      responses:
        200:
          description: 'Cashout status returned.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
  /cashout:
    post:
      tags:
      - 'bet'
      summary: 'Cashout bets'
      description: 'Cashout number of bets for user'
      operationId: 'CashoutController'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Cashout bets for a user"
          required: true
          schema:
            type: 'object'
            properties:
              bets:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
                    cashout_odd:
                      type: 'string'
                      title: 'cashout_odd'
      responses:
        200:
          description: 'Cashed out successfully'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
  /accumulator_bets/confirm:
    post:
      tags:
      - 'accumulator_bets'
      summary: 'Confirm a accumulator bet'
      description: 'Confirm a accumulator bet'
      operationId: 'AccumulatorBetsControllerConfirm'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "List of accumulator bets to confirm"
          required: true
          schema:
            type: 'object'
            properties:
              accumulator_bets:
                type: 'array'
                title: 'accumulator_bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
                    stake:
                      type: 'integer'
                      title: 'stake'
      responses:
        200:
          description: "Bet is confirmed."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /accumulator_bets:
    post:
      tags:
      - 'accumulator_bets'
      summary: 'Create accumulator bet passing bet slips'
      description: 'Create accumulator bet'
      operationId: 'accumulatorbetscontroller'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Create accumulator bet"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bet_slips'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    outcome_id:
                      type: 'integer'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    identifier:
                      type: 'integer'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
      responses:
        200:
          description: 'Accumulator Bet Created.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
    get:
      tags:
      - 'accumulator_bets'
      summary: "Return all accumulator bets for current user"
      description: "Return all accumulator bets for current user"
      operationId: "current_user_accumulator_bets"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of bets [pending, won, lost, hold, resolved]'
        required: true
        type: 'string'
        enum: ['pending', 'won', 'lost', 'hold', 'resolved']
        default: 'pending'
        allowEmptyValue: false
      - name: 'page'
        in: 'path'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'path'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'betting_pool_id'
        in: 'query'
        description: 'betting_pool_id'
        required: false
        type: 'integer'
        allowEmptyValue: true
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /accumulator_bets/batch_delete:
    post:
      tags:
      - 'accumulator_bets'
      summary: 'delete accumulator bets'
      description: 'Delete accumulator bets'
      operationId: 'AccumulatorBetsDelete'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "List of accumulator bets to delete"
          required: true
          schema:
            type: 'object'
            properties:
              accumulator_bets:
                type: 'array'
                title: 'accumulator_bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
      responses:
        200:
          description: "Accumulator bets are deleted."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /accumulator_bets/delete_bets:
    delete:
      tags:
      - 'accumulator_bets'
      summary: 'delete bets in accumulator'
      description: 'delete bets in accumulator'
      operationId: 'AccumulatorBetDelete'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "body"
          in: "body"
          description: "List of bets in accumulator to delete"
          required: true
          schema:
            type: 'object'
            properties:
              accumulator_bets:
                type: 'array'
                title: 'accumulator_bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
                    bets:
                      type: 'array'
                      title: 'bets'
                      items:
                        properties:
                          id:
                            type: 'integer'
                            title: 'id'
      responses:
        200:
          description: "Accumulator bets are deleted."
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /accumulator_bets/cashout:
    post:
      tags:
      - 'accumulator_bets'
      summary: 'Cashout accumulator bets'
      description: 'Cashout number of accumulator bets for user'
      operationId: 'AccumulatorBetsCashoutController'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Cashout accumulator bets for a user"
          required: true
          schema:
            type: 'object'
            properties:
              accumulator_bets:
                type: 'array'
                title: 'accumulator bets'
                items:
                  properties:
                    id:
                      type: 'integer'
                      title: 'id'
                    cashout_odd:
                      type: 'string'
                      title: 'cashout_odd'
      responses:
        200:
          description: 'Cashed out successfully'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
  /tournaments/{tournament_id}/matches/{match_id}/my_bets:
    get:
      tags:
      - "bet"
      summary: "Return all bets for a match for current user"
      description: "Return all bets for a match for current user"
      operationId: "my_bets"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'tournament_id'
        in: 'path'
        description: 'ID of tournament'
        required: true
        type: 'integer'
        allowEmptyValue: false
      - name: 'match_id'
        in: 'path'
        description: 'ID of match'
        required: true
        type: 'integer'
        allowEmptyValue: false
      - name: 'scope'
        in: 'query'
        description: 'Scope of bets [pending, won, lost]'
        required: true
        type: 'string'
        enum: ['pending', 'won', 'lost']
        default: 'pending'
        allowEmptyValue: false
      - name: 'page'
        in: 'path'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'path'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /friends:
    get:
      tags:
      - "friend"
      summary: "Return all friends"
      description: "Return all friends of current user"
      operationId: "friendscontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'page'
        in: 'query'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'per_page'
        in: 'query'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /friends/{id}:
    delete:
      tags:
      - 'friend'
      summary: 'Unfriend a current friend'
      description: 'Unfriend a friend of current user'
      operationId: "friends_unfriend"
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of friend"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: 'Successful operation'
        404:
          description: 'Resource not found.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: "Could not unfriend because friendship doesn't exist."
      security:
        - JWT: []
  /friend_requests:
    post:
      tags:
      - 'friend request'
      summary: 'Send a friend request'
      description: 'Send a friend request to a user'
      operationId: "friend_request"
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Id of friend"
          required: true
          schema:
            type: 'object'
            properties:
              friend_id:
                type: 'integer'
                title: 'friend_id'
      responses:
        200:
          description: 'Friend request successfuly sent.'
        404:
          description: 'Resource not found.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Could not send friend request because of existing request or friendship.'
      security:
        - JWT: []
  /friend_requests/accept:
    post:
      tags:
      - 'friend request'
      summary: 'Accept a friend request'
      description: 'Accept a friend request from a user'
      operationId: "friend_request_accept"
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Id of friend"
          required: true
          schema:
            type: 'object'
            properties:
              friend_id:
                type: 'integer'
                title: 'friend_id'
      responses:
        200:
          description: 'Successful operation'
        404:
          description: 'Resource not found.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: "Could not accept friend request because friend is already added or request not found."
      security:
        - JWT: []
  /friend_requests/decline:
    delete:
      tags:
      - 'friend request'
      summary: 'Decline a friend request'
      description: 'Decline a friend request from a user'
      operationId: "friend_request_decline"
      produces:
      - 'application/json'
      - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Id of friend"
          required: true
          schema:
            type: 'object'
            properties:
              friend_id:
                type: 'integer'
                title: 'friend_id'
      responses:
        200:
          description: 'Successful operation'
        404:
          description: 'Resource not found.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: "Could not decline friend request because friend is already added or request not found."
      security:
        - JWT: []
  /countries:
    get:
      tags:
      - "country"
      summary: "Return all countries"
      description: "Return all countries"
      operationId: "countriescontroller"
      produces:
      - "application/json"
      parameters:
      - name: 'continent'
        in: 'query'
        description: 'continent'
        required: false
        type: 'string'
        allowEmptyValue: false
      - name: 'sport_id'
        in: 'query'
        description: 'sport_id'
        required: true
        type: 'integer'
        format: 'int64'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /countries/{id}/cities:
    get:
      tags:
      - "country"
      summary: "Return all cities"
      description: "Return all cities"
      operationId: "CountriesControllerCities"
      produces:
      - "application/json"
      parameters:
      - name: 'id'
        in: 'path'
        description: 'alpha3'
        required: true
        type: 'string'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /leaderboards/world:
    get:
      tags:
      - "leaderboard"
      summary: "Return all users with rank for individual competition"
      description: "Return all users with their rank"
      operationId: "leaderboardscontroller"
      produces:
      - "application/json"
      parameters:
      - name: 'interval'
        in: 'query'
        description: 'interval'
        required: false
        type: 'integer'
        allowEmptyValue: false
      - name: 'period'
        in: 'query'
        description: 'period'
        required: false
        type: 'sring'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Leaderboards"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /leaderboards/match:
    get:
      tags:
      - "leaderboard"
      summary: "Return all users with rank for individual match"
      description: "Return all users with their rank"
      operationId: "matchleaderboards"
      produces:
      - "application/json"
      parameters:
      - name: 'match_id'
        in: 'query'
        description: 'match_id'
        required: false
        type: 'integer'
        allowEmptyValue: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Leaderboards"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /languages:
    get:
      tags:
      - "language"
      summary: "Return all languages"
      description: "Return all languages"
      operationId: "languagescontroller"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /dialects:
    get:
      tags:
      - "dialect"
      summary: "Return all dialects"
      description: "Return all dialects"
      operationId: "dialectscontroller"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /topics:
    get:
      tags:
      - "topic"
      summary: "Return all topics"
      description: "Return all topics"
      operationId: "topicscontroller"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Topic"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /occupations:
    get:
      tags:
      - "occupation"
      summary: "Return all occupations"
      description: "Return all occupations"
      operationId: "occupationscontroller"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Occupation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /organizations:
    get:
      tags:
      - "organization"
      summary: "Return all organizations"
      description: "Return all organizations"
      operationId: "organizationscontroller"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Organization"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /users/betting_pools:
    get:
      tags:
      - 'Betting Pool'
      summary: "Return all pools for current login user"
      description: "Return all pools for current login user"
      operationId: "userpoolsindex"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of pools [opened, closed]'
        required: false
        type: 'string'
        enum: ['opened', 'closed']
        allowEmptyValue: true
      - name: 'page'
        in: 'path'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: true
      - name: 'per_page'
        in: 'path'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: true
      responses:
        200:
          description: "Successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/matches:
    get:
      tags:
      - "Betting Pool"
      summary: "Return all matches of pool"
      description: "Return all matches of pool"
      operationId: "bettingpoolmatchescontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Matches"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/wallet:
    get:
      tags:
      - "Betting Pool"
      summary: "Return wallet of participant"
      description: "Return wallet of participant"
      operationId: "bettingpoolwalletcontroller"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Wallet"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/accumulator_bets:
    post:
      tags:
      - 'Betting Pool'
      summary: 'Create accumulator bet passing bet slips in pool'
      description: 'Create accumulator bet in pool'
      operationId: 'poolaccumulatorbetscontroller'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Create accumulator bet"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bet_slips'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    outcome_id:
                      type: 'integer'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    identifier:
                      type: 'integer'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
      responses:
        200:
          description: 'Accumulator Bet Created.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/bets:
    post:
      tags:
      - 'Betting Pool'
      summary: 'Create bet slip for pool'
      description: 'Create bet slip on live matches for pool'
      operationId: 'poolbetcontroller'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Create bet slip on live matches"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bet_slips'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    outcome_id:
                      type: 'integer'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    stake:
                      type: 'integer'
                      title: 'stake'
                    identifier:
                      type: 'integer'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
      responses:
        200:
          description: 'Bet Created.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/hold:
    post:
      tags:
      - 'Betting Pool'
      summary: 'Create bet slip to hold a bet in pool'
      description: 'Create bet slip to hold a bet in pool'
      operationId: 'PoolBetHoldController'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Create bet slip on live matches"
          required: true
          schema:
            type: 'object'
            properties:
              bet_slips:
                type: 'array'
                title: 'bets'
                items:
                  properties:
                    match_id:
                      type: 'integer'
                      title: 'match_id'
                    market_id:
                      type: 'integer'
                      title: 'market_id'
                    outcome_id:
                      type: 'integer'
                      title: 'outcome_id'
                    odds:
                      type: 'string'
                      title: 'odds'
                    stake:
                      type: 'integer'
                      title: 'stake'
                      required: false
                    identifier:
                      type: 'integer'
                      title: 'identifier'
                    specifier_text:
                      type: 'object'
                      title: 'specifier_text'
                      required: false
                    player_name:
                      type: 'string'
                      title: 'player_name'
                    team_name:
                      type: 'string'
                      title: 'team_name'
                    period:
                      type: 'string'
                      title: 'period'
                    play_number:
                      type: 'string'
                      title: 'play_number'
                    accumulator_bet_id:
                      type: 'integer'
                      title: 'accumulator_bet_id'
                      required: false
      responses:
        200:
          description: "successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools:
    get:
      tags:
      - 'Betting Pool'
      summary: "Return all pools"
      description: "Return all pools"
      operationId: "poolsindex"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: 'scope'
        in: 'query'
        description: 'Scope of pools [opened, closed]'
        required: false
        type: 'string'
        enum: ['opened', 'closed']
        allowEmptyValue: true
      - name: 'page'
        in: 'path'
        description: 'The paginated list page.'
        required: false
        type: 'integer'
        allowEmptyValue: true
      - name: 'per_page'
        in: 'path'
        description: 'The paginated list limit.'
        required: false
        type: 'integer'
        allowEmptyValue: true
      responses:
        200:
          description: "Successful operation"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools/{betting_pool_id}/participants:
    post:
      tags:
      - 'Betting Pool'
      summary: 'Join a pool'
      description: 'Create participants'
      operationId: 'createparticipants'
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool to join"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: 'Pool joined successfully.'
        401:
          description: 'Authorization information is missing or invalid.'
        400:
          description: 'Error Message.'
      security:
        - JWT: []
    get:
      tags:
      - 'Betting Pool'
      summary: "Return all participants in a pool"
      description: "Return all participants"
      operationId: "getparticipants"
      parameters:
        - name: 'page'
          in: 'query'
          description: 'The paginated list page.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: 'per_page'
          in: 'query'
          description: 'The paginated list limit.'
          required: false
          type: 'integer'
          allowEmptyValue: false
        - name: "betting_pool_id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Participant"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []
  /betting_pools/{id}:
    get:
      tags:
      - 'Betting Pool'
      summary: "Return pool informations"
      description: "Return all details of a pool"
      operationId: "getpool"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of pool"
          required: true
          type: "integer"
          format: "int64"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BettingPools"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

  /casino:
    get:
      tags:
      - 'Casino'
      summary: "Return all casinos"
      description: "Return all details of a casino" 
      parameters:
        - name: "page"
          in: "query"
          description: "Page no for pagination"
          required: false
          type: "integer"
          format: "int64"

        - name: "item_types"
          in: "query"
          description: "Selected item_type from the list(make sure your item_type is from the list corresponding to live or non-live casino)"
          required: false
          type: "string"
        
        - name: "live_casino"
          in: "query"
          description: "Live or non-live casino"
          required: false
          type: "boolean"

        - name: "search"
          in: "query"
          description: "Search keywords"
          required: false
          type: "string" 

        - name: "has_freespins"
          in: "query"
          description: "has freespins(api to search)"
          required: false
          type: "boolean" 

        - name: "has_lobby"
          in: "query"
          description: "has lobby(api to search)"
          required: false
          type: "boolean" 

        - name: "is_mobile"
          in: "query"
          description: "is mobile(api to search)"
          required: false
          type: "boolean" 

        - name: "provider"
          in: "query"
          description: "provider(api to search).Supply comma separated strings"
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string

      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BettingPools"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: [] 

  /casino/{uuid}/init_game_session:
    get:
      tags:
      - 'Casino'
      summary: "After clicking on a game"
      parameters:
        - name: "uuid"
          in: "path"
          description: "Game ID"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BettingPools"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

  /casino/{uuid}/lobby:
    get:
      tags:
      - 'Casino'
      summary: "Return lobby games"
      parameters:
        - name: "uuid"
          in: "path"
          description: "Game ID"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BettingPools"
        401:
          description: 'Authorization information is missing or invalid.'
      security:
        - JWT: []

securityDefinitions:
  JWT:
    description: ""
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  OddsSummary:
    type: 'object'
    schema:
      outcome_id:
        type: 'object'
        properties:
          name:
            type: 'string'
            odds_summary:
              type: 'array'
              items:
                type: 'object'
                properties:
                  timestamp:
                    type: 'string'
                    example: '1528980261100'
                  odd:
                    type: 'string'
                    example: '2.3'
  ProfileImage:
    type: 'object'
    schema:
      message:
        type: 'object'
        properties:
          user:
            type: 'object'
  UserStateTransition:
    type: 'object'
    properties:
      from:
        type: 'string'
        example: 'previous_state'
      to:
        type: 'string'
        example: 'updated_state'
      user:
        $ref: '#definitions/User'
  Topic:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1'
      name:
        type: 'string'
        example: 'fcb'
      enabled:
        type: 'boolean'
        example: true
  Token:
    type: 'object'
    properties:
      access_token:
        type: 'string'
        example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhdmFudGFnZV93ZWIiLCJpYXQiOjE1MTg1ODY5OTcsImp0aSI6IjQ3YjNkZmI0LTgwMzUtNDhiNy1hOGQ1LWYwMjk3MDdkM2IwMCIsInVzZXIiOnsiaWQiOjF9fQ.tjaix243kPQ3oF-3ml_sRmNzx8-A-_1M7xQz0o-gCURyH4h5yskcZJKo4W_rpvW1jxP60LXP24k0IRVDePoRUA'
  Season:
    type: 'object'
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "UEFA Youth League 17/18"
      acronym:
        type: 'string'
        example: 'UEFA'
      start_time::
        type: "string"
        format: "date-time"
        example: Wed, 07 Feb 2018 15:00:00 UTC +00:00
      end_time:
        type: "string"
        format: "date-time"
        example: Wed, 07 Feb 2018 15:00:00 UTC +00:00
      sport:
        $ref: '#definitions/Sport'
      tournament:
        type: 'object'
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 1
          name:
            type: 'string'
            example: 'Eredivisie'
  Sport:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Soccer"
      favourite:
        type: 'boolean'
        example: true
      favourite_id:
        type: 'integer'
        example: 1
    xml:
      name: "Sport"
  Participant:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      pool_balance:
        type: 'number'
        format: 'float'
        example: 20.25
      username:
        type: 'string'
        example: 'Messi'
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first_name:
        type: "string"
        example: "John"
      last_name:
        type: "string"
        example: "Doe"
      email:
        type: "email"
        example: "johndoe@xyz.com"
  Match:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      status:
        type: "string"
        example: "not_started"
      schedule_at:
        type: "string"
        format: "date-time"
        example: Wed, 07 Feb 2018 15:00:00 UTC +00:00
      venue:
        $ref: "#/definitions/Venue"
      teams:
        type: 'array'
        items:
          type: 'object'
          properties:
            id:
              type: 'integer'
              format: 'int64'
              example: 1
            name:
              type: 'string'
              example: 'Atletico Madrid'
            acronym:
              type: 'string'
              example: 'ALT'
      sport:
        $ref: "#/definitions/Sport"
      tournament:
        type: 'object'
        properties:
          id:
            type: 'integer'
            format: 'int64'
            example: 1
          name:
            type: 'string'
            example: 'Eredivisie'
  Team:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: 'string'
        example: 'Atletico Madrid'
      country_name:
        type: 'string'
        example: 'Spain'
      acronym:
        type: 'string'
        example: 'ATL'
      favourite:
        type: 'boolean'
        example: true
      favourite_id:
        type: 'integer'
        example: 1
      sport:
        $ref: "#/definitions/Sport"
      team_players:
        $ref: "#/definitions/TeamPlayers"
  TeamPlayer:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: 'string'
        example: 'Lionel Messi'
      jersey_number:
        type: 'string'
        example: '10'
  Venue:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: 'string'
        example: 'Vitesse Arnhem'
      city_name:
        type: 'string'
        example: 'Den Haag'
      country_name:
        type: 'string'
        example: 'Netherlands'
  Tournament:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: 'string'
        example: 'Eredivisie'
      favourite:
        type: 'boolean'
        example: true
      favourite_id:
        type: 'integer'
        example: 1
      tournament_type:
        type: 'string'
        example: 'league'
      sport:
        $ref: '#/definitions/Sport'
  Sport_match:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      status:
        type: "string"
        example: "not_started"
      schedule_at:
        type: "string"
        format: "date-time"
        example: Wed, 07 Feb 2018 15:00:00 UTC +00:00
      venue:
        $ref: "#/definitions/Venue"
      teams:
        type: 'array'
        items:
          type: 'object'
          properties:
            id:
              type: 'integer'
              format: 'int64'
              example: 1
            name:
              type: 'string'
              example: 'Atletico Madrid'
            acronym:
              type: 'string'
              example: 'ALT'
      tournament:
        type: 'object'
        properties:
          id:
            type: 'integer'
            format: 'int64'
            example: 1
          name:
            type: 'string'
            example: 'Eredivisie'
  Tournament_match:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      status:
        type: "string"
        example: "not_started"
      schedule_at:
        type: "string"
        format: "date-time"
        example: Wed, 07 Feb 2018 15:00:00 UTC +00:00
      venue:
        $ref: "#/definitions/Venue"
      teams:
        type: 'array'
        items:
          type: 'object'
          properties:
            id:
              type: 'integer'
              format: 'int64'
              example: 1
            name:
              type: 'string'
              example: 'Atletico Madrid'
            acronym:
              type: 'string'
              example: 'ALT'
      sport:
        $ref: "#/definitions/Sport"
  Sport_Tournament:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 1
      name:
        type: 'string'
        example: 'Eredivisie'
  LeaderboardItem:
    type: 'object'
    properties:
      name:
        type: 'string'
        example: 'Lionel Messi'
      total:
        type: 'number'
        format: 'float'
        example: 4000.25
      pending:
        type: 'number'
        format: 'float'
        example: 100.50
      net_points_gain:
        type: 'number'
        format: 'float'
        example: 1
      percentage_gain:
        type: 'number'
        format: 'float'
        example: 1
      rank_percentage:
        type: 'number'
        format: 'float'
        example: 45
      rank:
        type: 'integer'
        format: 'int64'
        example: 1
      level:
        type: 'string'
        example: '3A'
  Sport_matches:
    type: 'array'
    items:
      $ref: '#/definitions/Sport_match'
  Tournament_matches:
    type: 'array'
    items:
      $ref: '#/definitions/Tournament_match'
  Sport_Tournaments:
    type: 'array'
    items:
      $ref: '#/definitions/Sport_Tournament'
  Sports:
    type: "array"
    items:
      $ref: "#definitions/Sport"
  Matches:
    type: 'array'
    items:
      $ref: '#/definitions/Match'
  Users:
    type: 'array'
    items:
      $ref: '#/definitions/User'
  Tournaments:
    type: 'object'
    properties:
      pending:
        type: 'array'
        items: '#/definitions/Tournament'
      cup:
        type: 'array'
        items: '#/definitions/Tournament'
      tournament:
        type: 'array'
        items: '#/definitions/Tournament'
      league:
        type: 'array'
        items: '#/definitions/Tournament'
  Teams:
    type: 'array'
    items:
      $ref: '#/definitions/Team'
  TeamPlayers:
    type: 'array'
    items:
      $ref: '#/definitions/TeamPlayer'
  Groups:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Group 1"
      users:
        $ref: "#/definitions/User"
    xml:
      name: "Sport"
  Leaderboards:
    type: 'array'
    items:
      $ref: '#/definitions/LeaderboardItem'
  Topics:
    type: 'array'
    items:
      $ref: '#/definitions/Topic'
  BettingPools:
    type: 'array'
    matches:
      $ref: '#/definitions/Match'
